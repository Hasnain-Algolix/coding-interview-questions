There is an tournament algorithm taking place, which multiple teams will compete against each other, we are going to have a bunch of different competitions in this tournament, there will be two teams that will compete in each competition, and there is one winner and one loser from all of these competitons.

Each team will compete against all other teams exactly one time, and this is what we call Round.

There are two inputs for this problem, one is competitions array and one is results array:

const competitions = [
  ["HTML", "C#"],
  ["C#", "Python"],
  ["Python", "HTML"],
]

const results = [0, 0, 1]


We ask to return the winning team, more specifically the name of the winning team.

The team that wins, is that who has most number of wins or the most number of points.


Every time when you win a game you get 3 points and when you lose the game you get 0 points.

It's guarantee there is only one winner, there is no tie in between two teams.

As we have competitions array, and results array, these both arrays have same index, mean the 0 represents the first child array in the array, and 2nd number in the results array represents the second child array, so on and so forth.

The first string in the child array is the name of the Home team and the second string is the name of the away team.

When you see 0 in results team that means away team won that competition, If you see 1 that is home team won that competition


You will always be given two teams, so that mean you will have at least one competition.

You competitions array is going to have same length as your results array.

Problems:
  We need to keep track or each team and how many numbers each time has


Solution - :
  We are gonna create an empty Hash Table, and in this hash table, we will add each team name as key and their scores as the value of the key.

  We are gonna loop the competitions array, and will add a pointer on each array, we want to keep track of each competition itself, which is HTML and C#. We also need to know the index of this competition at. The reason is that we want to access index from the results array, so we figure out what team actually won, in theory we are going to loop both arrays, once we figure out which team is winner, next we need to update score of that team in our scores hash table.

  First we will check if the team exists in the hash table or not, if it exists than update the number, otherwise add this team to the table.

  We can also say if the team is not present in the hash table than that team has not won any game.

  After adding all the teams and their scores in hash table, now we will loop the hash table, and find the team that has most scores than other teams and simply return that team.



Optimal Solution
-- We can do all the mentioned things using one loop, to do so first we need to create a variable that is going to keep track of highest score that we currently seen, or infact it will keep track of the team that has highest scores.

Create a new variable:
  const bestTeam = ''

We will start looping the competitions and results array, and our scores hash table will be empty.

When we loop over the competitions and results array, we will add the winner team into scores hash table, and update the scores of it, but alongside this we will compare the scores that we just updated into the hash table with the current bext team or bestTeam score variable. In simple words while looping the arrays we will compare the winner team with current best team, in this case our current team is empty string we will add empty key and 0 value in the scores hash table.

Now we will lookup the best team scores in the hash tables, which is 0 in our case, and compare it with the scores of the team that just won, we can see c# has the greater scores than the empty string that is current best team, now we will udpdate the current best team with c#


Again we will see for the next competition who is the winner, in our case Python is winner, we will add python into hash table along with it scores. Now we will compare winner team (Python) with current best team, so the both teams has same scores, we are not going to update the current best team. We will assume if the Python is best team we will update later on.


In the last competition, again the python is winner now we will update the python scores form 3 to 6. Now we will compare winner team scores (Python) with current best team, if it is greater than update the current best team


Space complexity is O(k)






