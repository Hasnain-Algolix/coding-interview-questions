We have an array of integers, and these integers will always be sorted in asc order. You should not modify the input array, you must create a new output array


Task:
  Return the squares of the array, again in asc order


Example input and output:
  const inputArr = [1, 2, 3, 4, 5, 6, 7, 8, 9]

  const outputArr = [1, 4, 9, 16, 25, 36, 49, 64, 81]


The sample input array is very simple and does not contain any negative intergers, but what if we have negative integers into the array, then the square of the negative numbers will be greater than the other number in the array.
  Like:
  const arr = [-3, 2, 4]
  const output = [9, 4, 16]
  const sorted = [4, 9, 16]

  In this situation we need to make sure that our output array should be sorted in asc order.


Solution 1:
O(n log n) Time
O(n)  Space
  Generate the squares of all the numbers put them into new output array, sort them and return the output array.

  The actual time complexity is like this:
    n + n log n
    ^
    -- we remove the constants




O (n) = Space Time
Solution 2:
  As out input array is sorted in asc order, this problem should be solved in linear time.
  Initialize a new array, in our array we have negative and positive integers, and we know that if we go to left side or right side, the squares of the integers will be larger, so we will compare the first negative number with last positive number, if we get the absolute number of any negative values that is after removing the minus than that will be greater than the other number.
  We will add two pointers one at the start and one at the end, and than we will compare the start value with end value, and keep in mind that we are gonna compare absolute values of the array and than adding the squares of those values into new array.
  If the end is greater than the first than add the end value at the end, and now move the end pointer over to next value. If the start is greater than the end than add the start value and move the pointer over to next value


Explanation of the function.
  Create an empty array to store the squares of the intergers

  Create two variables, one points to the first element of the array and second points to the last element of the array

  Loop through the array in reverse order, mean loop the arrray from the end

  Inside the loop get the first value of the array using previously created index variables, you need to get first and last element

  Now to check and compare the values you need to get the absolute values of the integers

  Check if the small value is greater than the larger value than increae the small value index, and push the item to the squares array
  
  If the small value is less then the larger value move the larg value pointer to the left